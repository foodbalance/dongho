<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">
	
	<resultMap id="resultList" type="Member">
		<result property="user_id" column="user_id" />
		<result property="user_pwd" column="user_pwd" />
		<result property="user_name" column="user_name" />
		<result property="user_fnum" column="user_fnum" />
		<result property="user_enum" column="user_enum" />
		<result property="phone" column="phone" />
		<result property="email" column="email" />
		<result property="postcode" column="postcode" />
		<result property="address" column="address" />
		<result property="address1" column="address1" />
		<result property="address2" column="address2" />		
		<result property="keyword" column="keyword" />
		<result property="admin_ok" column="admin_ok" />
		<result property="login_ok" column="login_ok" />
		<result property="login_stack" column="login_stack" />		
	</resultMap>
		
		
	<!-- 로그인 -->	
	<select id="selectLogin" parameterType="Member" resultType="Member">
		select * from member 	
		where user_id = #{ user_id }
	</select>
	
	
	<!-- 로그인 제한 스텍 초기화 -->
	<update id="updateLoginStack" parameterType="Member">
		update member 
		set login_stack = #{ login_stack } 
		where user_id = #{ user_id }
	</update>
	
	<!-- 로그인 제한 여부 -->
	<update id="updateLoginOk" parameterType="Member">
		update member 
		set login_ok = #{ login_ok } 
		where user_id = #{ user_id }
	</update>
		
	<!-- 비밀번호 암호화 -->
	<update id="updatePwdEncoding" parameterType="Member">
		update member 
		set user_pwd = #{ user_pwd } 
		where user_id = #{ user_id }
	</update>
	
	<!-- 회원가입 -->
	<insert id="insertMember" parameterType="Member">
		insert into member (user_id, user_pwd, user_name, user_fnum, user_enum, phone, email, postcode,
		                    address, address1, address2, keyword, admin_ok, login_ok,login_stack)
		values (#{ user_id }, #{ user_pwd }, #{ user_name }, #{ user_fnum }, #{ user_enum }, #{ phone }, #{ email }, 
		        #{ postcode }, #{ address }, #{ address1 },#{ address2 }, #{ keyword }, 'N', 'Y', 0)
	</insert>

	
	<!-- 아이디 중복체크 -->
	<select id="selectCheckId" parameterType="string" resultType="_int">
		select count(user_id) 
		from member 
		where user_id = #{ user_id }	
	</select>
	
	
	<!-- 이메일로 유저 중복체크 -->
	<select id="dupCheck" parameterType="String" resultType="Member">
		select *
		from member
		where email = #{ email }
	</select>
	
	<!-- 카카오) 아이디로 유저 중복체크 -->
	<select id="kakaodupCheck" parameterType="String" resultType="Member">
		select *
		from member
		where user_id = #{ user_id }
	</select>
	
	<!-- 이메일로 유저 선택 -->
	<select id="selectUser" parameterType="String" resultType="Member">
		select * from member
		where email = #{ email }
	</select>
	
	
	<!-- 회원수 카운트 -->
	<select id="getListCount" resultType="_int">
		select count(*) from member
	</select>
	
	<!-- 회원전체 조회 -->
	<select id="selectList" parameterType="Paging" resultType="Member">
		<![CDATA[
			SELECT *  
			FROM (SELECT ROWNUM RNUM, user_id, user_pwd, user_name, user_fnum, user_enum, phone, email,
			             postcode, address, address1, address2, keyword, admin_ok, login_ok,login_stack
			       FROM (SELECT * FROM MEMBER order by user_id desc))
			where rnum >= #{startRow} and rnum <= #{endRow}
		]]>
	</select>
	
	<!-- 아이디로 검색시 총 목록갯수 조회 -->
	<select id="searchListCount" resultType="_int" parameterType="string">
		select count(*) from member
		where user_id like '%' || #{ keyword} || '%'
	</select>
	
	<!-- 아이디로 검색 -->
	<select id="searchId" parameterType="Object" resultMap="resultList">
		<![CDATA[
			SELECT *  
			FROM (SELECT ROWNUM RNUM, user_id, user_pwd, user_name, user_fnum, user_enum, phone, email,
			             postcode, address, address1, address2, keyword, admin_ok, login_ok,login_stack
			       FROM (SELECT * FROM MEMBER where user_id like '%' || #{ keyword } || '%'))
			where rnum >= #{startRow} and rnum <= #{endRow}
		]]>
	</select>
	
	<!-- 로그인 가능여부로 총 목록갯수 조회 -->
	<select id="searchOkListCount" resultType="_int" parameterType="string">
		select count(*) from member
		where login_ok like '%' || #{ keyword} || '%'
	</select>
	<!-- 로그인 가능여부로 검색 -->
	<select id="selectSearchLoginOk" parameterType="Object" resultMap="resultList">
		<![CDATA[
			SELECT *  
			FROM (SELECT ROWNUM RNUM, user_id, user_pwd, user_name, user_fnum, user_enum, phone, email,
			             postcode, address, address1, address2, keyword, admin_ok, login_ok,login_stack
			       FROM (SELECT * FROM MEMBER where login_ok like '%' || #{ keyword } || '%'))
			where rnum >= #{startRow} and rnum <= #{endRow}
		]]>		
	</select>
	<!-- 내정보 수정 -->
	<update id="updateMember" parameterType="Member">
		update member 
		set user_pwd = #{ user_pwd },
			email = #{ email }, 			
			phone = #{ phone }, 
			postcode = #{ postcode },
			address = #{ address },  
			address1 = #{ address1 }, address2 = #{ address2 } 
		where user_id = #{ user_id }
	</update>
	
	<!-- 탈퇴할 회원 찾기 -->
	<select id="selectMember" parameterType="string" resultType="Member">
		select * from member 	
		where user_id = #{ user_id }	
	</select>
	<!-- 회원삭제 -->
	<delete id="deleteMember" parameterType="string">
		delete from member where user_id = #{ user_id }
	</delete>
	
	<!-- 비밀번호 찾기 키워드 -->
	<select id="selectCheckKeyword" parameterType="string" resultType="_int">
		select count(keyword) 
		from member 
		where keyword = #{ keyword }	
	</select>
	
	

	
</mapper>